package main

type TGenerationMethods string

const (
	// GenerationAPI indicates that the list is generated by calling an API
	GenerationAPI TGenerationMethods = "API"
	// GenerationEvents indicates that the list is generated by listening to on-chain events
	GenerationEvents TGenerationMethods = "Events"
	// GenerationExternalList indicates that the list is generated by retrieving a list from an external source
	GenerationExternalList TGenerationMethods = "External"
	// GenerationLegacyList is the same as GenerationExternalList, but it is for deprecated lists
	GenerationLegacyList TGenerationMethods = "Legacy"
)

type TGenerators struct {
	Exec             func()
	Name             string
	Description      string
	GenerationMethod TGenerationMethods
	Tags             []string //
}

var GENERATORS = map[string]TGenerators{
	`1inch`: {
		Exec:             build1InchTokenList,
		Name:             `1Inch`,
		Description:      `A list of tokens available in 1Inch DeFi / DEX aggregator`,
		GenerationMethod: GenerationAPI,
	},
	`coingecko`: {
		Exec:             buildCoingeckoTokenList,
		Name:             `CoinGecko`,
		Description:      `A list of tokens available showing in CoinGecko data agregator.`,
		GenerationMethod: GenerationAPI,
	},
	`cowswap`: {
		Exec:             buildCowswapTokenList,
		Name:             `Cow Swap`,
		Description:      `A list of tokens available for trading on CoW Swap, a DEX focused on MEV protection.`,
		GenerationMethod: GenerationExternalList,
	},
	`curve`: {
		Exec:             buildCurveTokenList,
		Name:             `Curve`,
		Description:      `A list of tokens available for trading on Curve, the largest stableswap.`,
		GenerationMethod: GenerationAPI,
	},
	`defillama`: {
		Exec:             buildDefillamaTokenList,
		Name:             `DefiLlama`,
		Description:      `A list of tokens available in DefiLlama token service`,
		GenerationMethod: GenerationExternalList,
	},
	`ledger`: {
		Exec:             buildLedgersTokenList,
		Name:             `Ledger`,
		Description:      `A list of tokens supported in Ledger Live App`,
		GenerationMethod: GenerationExternalList,
	},
	`optimism`: {
		Exec:             buildOptimismTokenList,
		Name:             `Optimism`,
		Description:      `A list of okens used as the source of truth for the Optimism Gateway.`,
		GenerationMethod: GenerationExternalList,
	},
	`paraswap`: {
		Exec:             buildParaswapTokenList,
		Name:             `Paraswap`,
		Description:      `A list of tokens available for trading on Paraswap DEX`,
		GenerationMethod: GenerationAPI,
	},
	`portals`: {
		Exec:             buildPortalsTokenList,
		Name:             `Portals`,
		Description:      `A list of tokens available for trading on Portals DEX.`,
		GenerationMethod: GenerationAPI,
	},
	`sushiswap-pairs`: {
		Exec:             buildSushiswapPairsTokenList,
		Name:             `SushiSwap (pairs)`,
		Description:      `A list of token pairs (liquidity pools) available for trading on SushiSwap.`,
		GenerationMethod: GenerationEvents,
	},
	`sushiswap`: {
		Exec:             buildSushiswapTokenList,
		Name:             `SushiSwap`,
		Description:      `A list of tokens available on SushiSwap DEX.`,
		GenerationMethod: GenerationExternalList,
	},
	`tokenlistooor`: {
		Exec:             buildTokenListooorList,
		Name:             `Tokenlistooor`,
		Description:      `An aggregated list of tokens from Paraswap, Yearn, and Curve`,
		GenerationMethod: GenerationAPI,
	},
	`uniswap-pairs`: {
		Exec:             buildUniswapPairsTokenList,
		Name:             `UniSwap (pairs)`,
		Description:      `A list of token pairs (liquidity pools) available for trading on UniSwap.`,
		GenerationMethod: GenerationEvents,
	},
	`uniswap`: {
		Exec:             buildUniswapTokenList,
		Name:             `UniSwap`,
		Description:      `A list of tokens available on UniSwap DEX.`,
		GenerationMethod: GenerationExternalList,
	},
	`wido`: {
		Exec:             buildWidoTokenList,
		Name:             `Wido`,
		Description:      `A list of tokens supported by the Wido Router`,
		GenerationMethod: GenerationAPI,
	},
	`yearn-extended`: {
		Exec:             buildYearnExtendedTokenList,
		Name:             `Yearn Extended`,
		Description:      `A list of tokens available for depositing in Yearn, the tokens that represent yVaults and any related tokens.`,
		GenerationMethod: GenerationExternalList,
	},
	`yearn`: {
		Exec:             buildYearnTokenList,
		Name:             `Yearn`,
		Description:      `A list of Yearn's vaults and their underlying tokens.`,
		GenerationMethod: GenerationAPI,
	},
}
